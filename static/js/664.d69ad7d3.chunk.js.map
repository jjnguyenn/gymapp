{"version":3,"file":"static/js/664.d69ad7d3.chunk.js","mappings":"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","sources":["components/PersonalRecord.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport {\n  collection,\n  addDoc,\n  query,\n  where,\n  getDocs,\n  orderBy,\n  deleteDoc,\n  doc\n} from \"firebase/firestore\";\nimport db from \"../Firebase\";\n\nfunction PersonalRecord() {\n  const { user, isAuthenticated } = useAuth0();\n  const [exercise, setExercise] = useState(\"\");\n  const [weight, setWeight] = useState(\"\");\n  const [reps, setReps] = useState(\"\");\n  const [records, setRecords] = useState([]);\n\n  // Load saved records when the user is authenticated\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadRecords();\n    }\n  }, [isAuthenticated, user]);\n\n  const loadRecords = async () => {\n    const recordsRef = collection(db, \"personal_records\");\n    const q = query(recordsRef, where(\"userId\", \"==\", user.sub), orderBy(\"timestamp\", \"desc\"));\n    const querySnapshot = await getDocs(q);\n\n    const fetchedRecords = [];\n    querySnapshot.forEach((doc) => {\n      fetchedRecords.push({ id: doc.id, ...doc.data() });\n    });\n\n    setRecords(fetchedRecords);\n  };\n\n  // Save a new record to Firestore\n  const saveRecord = async () => {\n    if (!user) return;\n\n    try {\n      const docRef = await addDoc(collection(db, \"personal_records\"), {\n        userId: user.sub,\n        exercise,\n        weight,\n        reps,\n        timestamp: new Date(),\n      });\n\n      console.log(\"Document written with ID: \", docRef.id);\n\n      setExercise(\"\");\n      setWeight(\"\");\n      setReps(\"\");\n\n      setRecords((prev) => [\n        { id: docRef.id, exercise, weight, reps, timestamp: new Date() },\n        ...prev,\n      ]);\n    } catch (error) {\n      console.error(\"Error saving record:\", error);\n      alert(\"Error saving record.\");\n    }\n  };\n\n  // Delete all records for the user\n  const clearAllRecords = async () => {\n    const confirmClear = window.confirm(\"Are you sure you want to delete all personal records?\");\n    if (!confirmClear || !user) return;\n\n    try {\n      const q = query(collection(db, \"personal_records\"), where(\"userId\", \"==\", user.sub));\n      const querySnapshot = await getDocs(q);\n\n      const deletePromises = querySnapshot.docs.map((recordDoc) => deleteDoc(doc(db, \"personal_records\", recordDoc.id)));\n      await Promise.all(deletePromises);\n\n      setRecords([]);\n    } catch (error) {\n      console.error(\"Error deleting records:\", error);\n      alert(\"Error deleting records.\");\n    }\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md mt-8 space-y-6\">\n      <h2 className=\"text-2xl font-bold text-teal-600\">Personal Record</h2>\n\n      {/* Record Form */}\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"text-teal-700 block mb-1\">Exercise</label>\n          <input\n            type=\"text\"\n            value={exercise}\n            onChange={(e) => {\n              const input = e.target.value;\n              if (/^[a-zA-Z\\s]*$/.test(input)) {\n                setExercise(input);\n              }\n            }}\n            className=\"w-full border rounded p-2\"\n            placeholder=\"e.g., Bench Press\"\n          />\n        </div>\n\n        <div>\n          <label className=\"text-teal-700 block mb-1\">Weight (lbs or kg)</label>\n          <input\n            type=\"number\"\n            value={weight}\n            onChange={(e) => setWeight(e.target.value)}\n            className=\"w-full border rounded p-2\"\n            placeholder=\"e.g., 150\"\n          />\n        </div>\n\n        <div>\n          <label className=\"text-teal-700 block mb-1\">Reps</label>\n          <input\n            type=\"number\"\n            value={reps}\n            onChange={(e) => setReps(e.target.value)}\n            className=\"w-full border rounded p-2\"\n            placeholder=\"e.g., 12\"\n          />\n        </div>\n\n        <button\n          onClick={saveRecord}\n          className=\"w-full bg-teal-600 text-white p-2 rounded\"\n        >\n          Save Record\n        </button>\n      </div>\n\n      {/* Saved Records */}\n      <div>\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"text-xl font-semibold text-teal-600\">Saved Records</h3>\n          {records.length > 0 && (\n            <button\n              onClick={clearAllRecords}\n              className=\"text-sm text-red-500 hover:underline\"\n            >\n              Clear All\n            </button>\n          )}\n        </div>\n\n        <div className=\"space-y-4 mt-4\">\n          {records.length > 0 ? (\n            records.map((record) => (\n              <div\n                key={record.id}\n                className=\"bg-gray-100 p-4 rounded-lg shadow-md\"\n              >\n                <div className=\"text-teal-700 font-semibold\">{record.exercise}</div>\n                <div className=\"text-teal-500\">\n                  Weight: {record.weight} | Reps: {record.reps}\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                  {new Date(record.timestamp?.seconds ? record.timestamp.seconds * 1000 : record.timestamp).toLocaleString()}\n                </div>\n              </div>\n            ))\n          ) : (\n            <p>No records found</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PersonalRecord;\n"],"names":["user","isAuthenticated","useAuth0","exercise","setExercise","useState","weight","setWeight","reps","setReps","records","setRecords","useEffect","loadRecords","async","recordsRef","collection","db","q","query","where","sub","orderBy","querySnapshot","getDocs","fetchedRecords","forEach","doc","push","id","data","_jsxs","className","children","_jsx","type","value","onChange","e","input","target","test","placeholder","onClick","docRef","addDoc","userId","timestamp","Date","console","log","prev","error","alert","length","window","confirm","deletePromises","docs","map","recordDoc","deleteDoc","Promise","all","record","_record$timestamp","seconds","toLocaleString"],"sourceRoot":""}