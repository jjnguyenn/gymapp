{"version":3,"file":"static/js/272.41f2de54.chunk.js","mappings":"sNASA,MA0IA,EA1IiBA,KACf,MAAM,KAAEC,EAAI,gBAAEC,IAAoBC,EAAAA,EAAAA,OAC3BC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAAS,KAC9CG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,iBAClCK,EAAcC,IAAmBN,EAAAA,EAAAA,UAAS,KAEjDO,EAAAA,EAAAA,YAAU,KACR,IAAKX,IAAoBD,EAAM,OAEXa,WAClB,MAAMC,GAASC,EAAAA,EAAAA,IAAWC,EAAAA,EAAI,QAAShB,EAAKiB,IAAK,YAE3CC,SADiBC,EAAAA,EAAAA,IAAQL,IACHM,KAAKC,KAAIC,IAAG,CACtCC,GAAID,EAAIC,MACLD,EAAIE,WAGTpB,EAAUc,GACVX,EAAkBW,EAAW,EAG/BO,EAAa,GACZ,CAACxB,EAAiBD,IAErB,MAqCM0B,EAAoBC,IACxBlB,EAAYkB,EAAK,EAcnB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wGAAuGC,SAAA,EACpHC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,oDAAmDC,SAAC,yCAGlEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yCAAwCC,SAAA,EACrDF,EAAAA,EAAAA,MAAA,UACEC,UAAU,2EACVG,SAnBoBC,IAC1B,MAAMC,EAAOD,EAAEE,OAAOC,MACtBzB,EAAgBuB,GAGd3B,EADW,KAAT2B,EACgB/B,EAEAA,EAAOkC,QAAOC,GAASA,EAAMC,MAAMC,SAASN,KAChE,EAYME,MAAO1B,EAAaoB,SAAA,EAEpBC,EAAAA,EAAAA,KAAA,UAAQK,MAAM,GAAEN,SAAC,0BACjBC,EAAAA,EAAAA,KAAA,UAAQK,MAAM,qBAAKN,SAAC,cACpBC,EAAAA,EAAAA,KAAA,UAAQK,MAAM,eAAIN,SAAC,YACnBC,EAAAA,EAAAA,KAAA,UAAQK,MAAM,iCAAON,SAAC,UACtBC,EAAAA,EAAAA,KAAA,UAAQK,MAAM,iCAAON,SAAC,gBAGxBF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACEU,QAASA,IAAMf,EAAiB,gBAChCG,UAAU,mDAAkDC,SAC7D,gBAGDC,EAAAA,EAAAA,KAAA,UACEU,QAASA,IAAMf,EAAiB,gBAChCG,UAAU,mDAAkDC,SAC7D,eAGDC,EAAAA,EAAAA,KAAA,UACEU,QAASA,IAAMf,EAAiB,eAChCG,UAAU,mDAAkDC,SAC7D,oBAMLC,EAAAA,EAAAA,KAACW,EAAAA,EAAY,CACXC,QAAS,CAACC,EAAAA,EAAeC,EAAAA,EAAgBC,EAAAA,IACzCC,YAAavC,EACbL,OAAQG,EACR0C,UAhGkBnC,UACtB,MAAM0B,EAAQU,OAAO,0EACrB,GAAIV,EAAO,CACT,MAAMW,EAAW,CAAEX,QAAOY,KAAMC,EAAIC,SAC9BC,QAAeC,EAAAA,EAAAA,KAAOxC,EAAAA,EAAAA,IAAWC,EAAAA,EAAI,QAAShB,EAAKiB,IAAK,YAAaiC,GAC3E9C,EAAU,IAAID,EAAQ,IAAK+C,EAAU3B,GAAI+B,EAAO/B,MAChDhB,EAAkB,IAAID,EAAgB,IAAK4C,EAAU3B,GAAI+B,EAAO/B,KAClE,GA0FIiC,WAvFmB3C,UACnB4C,OAAOC,QAAQ,WAAWC,EAAUrB,MAAMC,mBACtCqB,EAAAA,EAAAA,KAAUtC,EAAAA,EAAAA,IAAIN,EAAAA,EAAI,QAAShB,EAAKiB,IAAK,WAAY0C,EAAUrB,MAAMf,KACvEnB,EAAUD,EAAOkC,QAAOJ,GAAKA,EAAEV,KAAOoC,EAAUrB,MAAMf,MACtDhB,EAAkBD,EAAe+B,QAAOJ,GAAKA,EAAEV,KAAOoC,EAAUrB,MAAMf,MACxE,EAmFIsC,UAhFkBhD,UACtB,MAAM,MAAEyB,GAAUwB,EACZC,EAAczB,EAAM0B,SACpBC,EAAU3B,EAAMf,SAGhB2C,EAAAA,EAAAA,KAAU5C,EAAAA,EAAAA,IAAIN,EAAAA,EAAI,QAAShB,EAAKiB,IAAK,WAAYgD,GAAU,CAC/Dd,KAAMY,IAIR3D,GAAU+D,GACRA,EAAK9C,KAAIY,GAAMA,EAAEV,KAAO0C,EAAU,IAAKhC,EAAGkB,KAAMY,GAAgB9B,MAElE1B,GAAkB4D,GAChBA,EAAK9C,KAAIY,GAAMA,EAAEV,KAAO0C,EAAU,IAAKhC,EAAGkB,KAAMY,GAAgB9B,KACjE,EAiEGmC,UAAU,EACVC,aAAa,QACbC,OAAO,OACPC,gBAAkBC,IAEhB,MAAMjC,EAAQiC,EAAKlC,MAAMC,MACnBY,EAAOqB,EAAKlC,MAAMmC,MAAMC,iBAC9BF,EAAKG,GAAGC,aAAa,QAAS,GAAGrC,OAAWY,IAAO,MAGnD,C","sources":["components/Schedule.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";  \nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { collection, getDocs, addDoc, deleteDoc, doc, updateDoc } from \"firebase/firestore\";\nimport db from \"../Firebase\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst Schedule = () => {\n  const { user, isAuthenticated } = useAuth0();\n  const [events, setEvents] = useState([]);\n  const [filteredEvents, setFilteredEvents] = useState([]);\n  const [viewType, setViewType] = useState(\"dayGridMonth\"); \n  const [selectedType, setSelectedType] = useState(\"\"); \n\n  useEffect(() => {\n    if (!isAuthenticated || !user) return;\n\n    const fetchEvents = async () => {\n      const colRef = collection(db, \"users\", user.sub, \"calendar\");\n      const snapshot = await getDocs(colRef);\n      const userEvents = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n\n      setEvents(userEvents);\n      setFilteredEvents(userEvents); \n    };\n\n    fetchEvents();\n  }, [isAuthenticated, user]);\n\n  const handleDateClick = async (arg) => {\n    const title = prompt(\"Enter workout (e.g. üèÉ Cardio, üèãÔ∏è Chest Day)\");\n    if (title) {\n      const newEvent = { title, date: arg.dateStr };\n      const docRef = await addDoc(collection(db, \"users\", user.sub, \"calendar\"), newEvent);\n      setEvents([...events, { ...newEvent, id: docRef.id }]);\n      setFilteredEvents([...filteredEvents, { ...newEvent, id: docRef.id }]);\n    }\n  };\n\n  const handleEventClick = async (clickInfo) => {\n    if (window.confirm(`Delete \"${clickInfo.event.title}\"?`)) {\n      await deleteDoc(doc(db, \"users\", user.sub, \"calendar\", clickInfo.event.id));\n      setEvents(events.filter(e => e.id !== clickInfo.event.id));\n      setFilteredEvents(filteredEvents.filter(e => e.id !== clickInfo.event.id));\n    }\n  };\n\n  const handleEventDrop = async (changeInfo) => {\n    const { event } = changeInfo;\n    const updatedDate = event.startStr;\n    const eventId = event.id;\n\n\n    await updateDoc(doc(db, \"users\", user.sub, \"calendar\", eventId), {\n      date: updatedDate,\n    });\n\n  \n    setEvents(prev =>\n      prev.map(e => (e.id === eventId ? { ...e, date: updatedDate } : e))\n    );\n    setFilteredEvents(prev =>\n      prev.map(e => (e.id === eventId ? { ...e, date: updatedDate } : e))\n    );\n  };\n\n  const handleViewChange = (view) => {\n    setViewType(view);\n  };\n\n  const handleFilterChange = (e) => {\n    const type = e.target.value;\n    setSelectedType(type);\n\n    if (type === \"\") {\n      setFilteredEvents(events); // Show all events\n    } else {\n      setFilteredEvents(events.filter(event => event.title.includes(type))); // Filter events by type\n    }\n  };\n\n  return (\n    <div className=\"max-w-5xl mx-auto mt-6 p-4 bg-white dark:bg-gray-900 border dark:border-gray-700 rounded-lg shadow-xl\">\n      <h2 className=\"text-3xl font-bold text-teal-600 mb-4 text-center\">üóìÔ∏è Workout Schedule</h2>\n\n    \n      <div className=\"flex justify-between items-center mb-4\">\n        <select \n          className=\"px-4 py-2 border rounded-md bg-teal-100 dark:bg-teal-700 dark:text-white\"\n          onChange={handleFilterChange}\n          value={selectedType}\n        >\n          <option value=\"\">Filter by Type (All)</option>\n          <option value=\"üèãÔ∏è\">Strength</option>\n          <option value=\"üèÉ\">Cardio</option>\n          <option value=\"üßò‚Äç‚ôÄÔ∏è\">Yoga</option>\n          <option value=\"üö¥‚Äç‚ôÇÔ∏è\">Cycling</option>\n        </select>\n\n        <div>\n          <button\n            onClick={() => handleViewChange(\"dayGridMonth\")}\n            className=\"px-4 py-2 mx-2 bg-teal-500 text-white rounded-lg\"\n          >\n            Month View\n          </button>\n          <button\n            onClick={() => handleViewChange(\"timeGridWeek\")}\n            className=\"px-4 py-2 mx-2 bg-teal-500 text-white rounded-lg\"\n          >\n            Week View\n          </button>\n          <button\n            onClick={() => handleViewChange(\"timeGridDay\")}\n            className=\"px-4 py-2 mx-2 bg-teal-500 text-white rounded-lg\"\n          >\n            Day View\n          </button>\n        </div>\n      </div>\n\n      <FullCalendar\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n        initialView={viewType}\n        events={filteredEvents}\n        dateClick={handleDateClick}\n        eventClick={handleEventClick}\n        eventDrop={handleEventDrop}\n        editable={true}\n        eventDisplay=\"block\"\n        height=\"auto\"\n        eventMouseEnter={(info) => {\n          \n          const title = info.event.title;\n          const date = info.event.start.toLocaleString();\n          info.el.setAttribute('title', `${title} - ${date}`);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Schedule;\n"],"names":["Schedule","user","isAuthenticated","useAuth0","events","setEvents","useState","filteredEvents","setFilteredEvents","viewType","setViewType","selectedType","setSelectedType","useEffect","async","colRef","collection","db","sub","userEvents","getDocs","docs","map","doc","id","data","fetchEvents","handleViewChange","view","_jsxs","className","children","_jsx","onChange","e","type","target","value","filter","event","title","includes","onClick","FullCalendar","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","initialView","dateClick","prompt","newEvent","date","arg","dateStr","docRef","addDoc","eventClick","window","confirm","clickInfo","deleteDoc","eventDrop","changeInfo","updatedDate","startStr","eventId","updateDoc","prev","editable","eventDisplay","height","eventMouseEnter","info","start","toLocaleString","el","setAttribute"],"sourceRoot":""}