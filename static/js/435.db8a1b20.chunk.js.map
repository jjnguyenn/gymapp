{"version":3,"file":"static/js/435.db8a1b20.chunk.js","mappings":"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","sources":["components/Settings.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { doc, getDoc, setDoc } from \"firebase/firestore\";\nimport db from \"../Firebase\";\n\nfunction Settings() {\n  const { user, isAuthenticated } = useAuth0();\n  const [darkMode, setDarkMode] = useState(false);\n  const [unit, setUnit] = useState(\"lbs\");\n  const [heightUnit, setHeightUnit] = useState(\"cm\");\n  const [notification, setNotification] = useState({ message: \"\", type: \"\" });\n\n  // Load settings from localStorage or Firebase\n  useEffect(() => {\n    const localSettings = localStorage.getItem(\"gymapp_settings\");\n    if (localSettings) {\n      const parsed = JSON.parse(localSettings);\n      setDarkMode(parsed.darkMode ?? false);\n      setUnit(parsed.unit ?? \"lbs\");\n      setHeightUnit(parsed.heightUnit ?? \"cm\");\n    }\n\n    // If user is logged in, load from Firebase\n    if (isAuthenticated && user) {\n      const loadSettings = async () => {\n        try {\n          const docRef = doc(db, \"settings\", user.sub);\n          const docSnap = await getDoc(docRef);\n          if (docSnap.exists()) {\n            const data = docSnap.data();\n            setDarkMode(data.darkMode ?? false);\n            setUnit(data.unit ?? \"lbs\");\n            setHeightUnit(data.heightUnit ?? \"cm\");\n\n            // Also save to localStorage for fallback\n            localStorage.setItem(\"gymapp_settings\", JSON.stringify(data));\n          }\n        } catch (error) {\n          console.error(\"Error loading settings from Firestore:\", error);\n        }\n      };\n\n      loadSettings();\n    }\n  }, [isAuthenticated, user]);\n\n  const saveSettings = async () => {\n    const settingsData = {\n      darkMode,\n      unit,\n      heightUnit,\n    };\n\n    // Save to localStorage\n    localStorage.setItem(\"gymapp_settings\", JSON.stringify(settingsData));\n\n    // Save to Firebase if authenticated\n    if (isAuthenticated && user) {\n      try {\n        await setDoc(doc(db, \"settings\", user.sub), settingsData, { merge: true });\n        setNotification({ message: \"Settings saved successfully!\", type: \"success\" });\n      } catch (error) {\n        console.error(\"Error saving settings:\", error);\n        setNotification({ message: \"Error saving settings.\", type: \"error\" });\n      }\n    } else {\n      setNotification({ message: \"Settings saved locally only.\", type: \"success\" });\n    }\n  };\n\n  return (\n    <div className=\"max-w-xl mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md mt-8 space-y-6\">\n      {notification.message && (\n        <div\n          className={`${\n            notification.type === \"success\" ? \"bg-green-500\" : \"bg-red-500\"\n          } text-white p-4 rounded-lg mb-6`}\n        >\n          {notification.message}\n        </div>\n      )}\n\n      <h2 className=\"text-2xl font-bold text-teal-600\">Settings</h2>\n\n      {/* Dark Mode Toggle */}\n      <div className=\"flex items-center justify-between\">\n        <label className=\"text-teal-700\">Dark Mode</label>\n        <input\n          type=\"checkbox\"\n          checked={darkMode}\n          onChange={() => setDarkMode(!darkMode)}\n        />\n      </div>\n\n      {/* Units */}\n      <div>\n        <label className=\"text-teal-700 block mb-1\">Preferred Units</label>\n        <select\n          value={unit}\n          onChange={(e) => setUnit(e.target.value)}\n          className=\"w-full border rounded p-2 bg-white text-gray-900 dark:bg-gray-700 dark:text-gray-100 dark:border-gray-600\"\n        >\n          <option value=\"lbs\">Pounds (lbs)</option>\n          <option value=\"kg\">Kilograms (kg)</option>\n        </select>\n      </div>\n\n      {/* Height Unit */}\n      <div>\n        <label className=\"text-teal-700 block mb-1\">Preferred Height Unit</label>\n        <select\n          value={heightUnit}\n          onChange={(e) => setHeightUnit(e.target.value)}\n          className=\"w-full border rounded p-2 bg-white text-gray-900 dark:bg-gray-700 dark:text-gray-100 dark:border-gray-600\"\n        >\n          <option value=\"cm\">Centimeters (cm)</option>\n          <option value=\"ft-in\">Feet (ft)</option>\n        </select>\n      </div>\n\n      <button\n        onClick={saveSettings}\n        className=\"w-full bg-teal-600 text-white p-2 rounded\"\n      >\n        Save Settings\n      </button>\n    </div>\n  );\n}\n\nexport default Settings;\n"],"names":["user","isAuthenticated","useAuth0","darkMode","setDarkMode","useState","unit","setUnit","heightUnit","setHeightUnit","notification","setNotification","message","type","useEffect","localSettings","localStorage","getItem","_parsed$darkMode","_parsed$unit","_parsed$heightUnit","parsed","JSON","parse","async","docRef","doc","db","sub","docSnap","getDoc","exists","_data$darkMode","_data$unit","_data$heightUnit","data","setItem","stringify","error","console","loadSettings","_jsxs","className","children","_jsx","checked","onChange","value","e","target","onClick","settingsData","setDoc","merge"],"sourceRoot":""}